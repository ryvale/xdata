:smart

references {

	nbItOracle(dateField, start, end) {
		type "oracle"
		
		from "r5events m"
		
		fields {
			manager exa { prefix 'm.evt_' }
			
			items {
				equipe "m.evt_mrc"
				
				nb { exp "count(*)", type "decimal" }
			}
		}
		
		criteria => dateField + " >= TO_DATE('" + start + "', 'YYYY-MM-DD HH24:MI:SS') and " + dateField + " <= TO_DATE('" + end + "', 'YYYY-MM-DD HH24:MI:SS')"
	},
	
	nbItSql(dateField, start, end) {
		type "sql"
		
		from "r5events m"
		
		fields {
			manager exa { prefix 'm.evt_' }
			
			items {
				equipe "m.evt_mrc",
				
				nb { exp "count(*)", type "decimal" }
			}
		}
		
		criteria =>  dateField + " >= convert(datetime, '" + start + "', 103) and " + dateField + " <= convert(datetime, '" + end + "', 103)",
		
		groupBy "m.evt_mrc"
	}
},

entities {
	entity1 {
			
		main {
			type "libre",
			
			eof => this.lineVisited == 1
		}
		
	}
	
	entity2(dateField, start, end) {
		type "smart"
			
		main {
			type "libre"
			
			eof => this.lineVisited == 1
		}
		
		nb {
			type "row-to-field",
				
			flow "after-main-next",
			
			source @nbItSql("m.evt_created", start, end),
			
			sharesConnection,
			
			fields {
				value => sourceDr.getDouble("nb"),
				
				items {
					nb1 {
						type "int",
						
						if => sourceDr.getString("equipe") == "COMMUN-TAV"
					},
					
					nb2 {
						value => rootOv.getString('entities.entity1.main.type')
					}
				}
			}
		},
		
		nb2 {
			type "row-to-field",
				
			flow "after-main-next",
			
			source @nbItSql("m.evt_created", start, end),
			
			//sharesConnection,
			
			fields {
				value => sourceDr.getDouble("nb"),
				
				items {
					nb3 {
						type "int",
						
						if => sourceDr.getString("equipe") == "COMMUN-TAV"
					},
					
					nb4 {
						value => rootOv.getString('entities.entity1.main.type')
					}
				}
			}
		}
		
	}
	
	entity3 {
		type "smart"
		
		main {
			type 'x-literal'
			
			rows [
				{ code "00" }
			]
		}
		
		an {
			type 'x-literal'
			
			flow 'after-main-next'
			
			rows [
				{ code2 = rootDr.getString('code') }
			]
		}
		
	}
}